{"ast":null,"code":"import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import FlatList from\"react-native-web/dist/exports/FlatList\";import moment from'moment';import Hour from\"./Hour\";var DayForecast=function DayForecast(_ref){var dayData=_ref.dayData,model=_ref.model,units=_ref.units;var swellDirection=dayData[0];var day=moment(Date.parse(dayData[0].time)).format('ddd');var hoursArr=[dayData[6],dayData[12],dayData[18]];function getCardinalDirection(angle){var directions=['↑','↗','→','↘','↓','↙','←','↖'];return directions[Math.round(angle/45)%8];}return React.createElement(View,{style:styles.container},React.createElement(View,{style:{borderBottomWidth:1,borderBottomColor:'white'}},React.createElement(Text,{style:{color:'white',fontSize:18,margin:10}},day),hoursArr.map(function(hour){return React.createElement(Hour,{key:hour.time,hourData:hour,model:model,units:units});})));};export default DayForecast;var windowWidth=Dimensions.get('window').width;var windowHeight=Dimensions.get('window').height;var styles=StyleSheet.create({container:{width:windowWidth-5,height:180}});","map":{"version":3,"sources":["/Users/sean/Documents/swellByte1-0/SwellByteClient/components/DayForecast.js"],"names":["React","moment","Hour","DayForecast","dayData","model","units","swellDirection","day","Date","parse","time","format","hoursArr","getCardinalDirection","angle","directions","Math","round","styles","container","borderBottomWidth","borderBottomColor","color","fontSize","margin","map","hour","windowWidth","Dimensions","get","width","windowHeight","height","StyleSheet","create"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,ySAEA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,CACA,MAAOC,CAAAA,IAAP,cAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAA+B,IAA5BC,CAAAA,OAA4B,MAA5BA,OAA4B,CAAnBC,KAAmB,MAAnBA,KAAmB,CAAZC,KAAY,MAAZA,KAAY,CACjD,GAAMC,CAAAA,cAAc,CAAGH,OAAO,CAAC,CAAD,CAA9B,CACA,GAAMI,CAAAA,GAAG,CAAGP,MAAM,CAACQ,IAAI,CAACC,KAAL,CAAWN,OAAO,CAAC,CAAD,CAAP,CAAWO,IAAtB,CAAD,CAAN,CAAoCC,MAApC,CAA2C,KAA3C,CAAZ,CACA,GAAMC,CAAAA,QAAQ,CAAG,CAACT,OAAO,CAAC,CAAD,CAAR,CAAaA,OAAO,CAAC,EAAD,CAApB,CAA0BA,OAAO,CAAC,EAAD,CAAjC,CAAjB,CACA,QAASU,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqC,CACnC,GAAMC,CAAAA,UAAU,CAAG,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,GAAhB,CAAqB,GAArB,CAA0B,GAA1B,CAA+B,GAA/B,CAAoC,GAApC,CAAnB,CACA,MAAOA,CAAAA,UAAU,CAACC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAAG,EAAnB,EAAyB,CAA1B,CAAjB,CACD,CAED,MACE,qBAAC,IAAD,EAAM,KAAK,CAAEI,MAAM,CAACC,SAApB,EACE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAACC,iBAAiB,CAAE,CAApB,CAAuBC,iBAAiB,CAAE,OAA1C,CAAb,EACE,oBAAC,IAAD,EAAM,KAAK,CAAE,CAACC,KAAK,CAAE,OAAR,CAAiBC,QAAQ,CAAE,EAA3B,CAA+BC,MAAM,CAAE,EAAvC,CAAb,EAA2DjB,GAA3D,CADF,CAEGK,QAAQ,CAACa,GAAT,CAAa,SAACC,IAAD,QAAU,qBAAC,IAAD,EAAM,GAAG,CAAEA,IAAI,CAAChB,IAAhB,CAAsB,QAAQ,CAAEgB,IAAhC,CAAsC,KAAK,CAAEtB,KAA7C,CAAoD,KAAK,CAAEC,KAA3D,EAAV,EAAb,CAFH,CADF,CADF,CAQD,CAjBD,CAmBA,cAAeH,CAAAA,WAAf,CACA,GAAMyB,CAAAA,WAAW,CAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA7C,CACA,GAAMC,CAAAA,YAAY,CAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA9C,CACA,GAAMd,CAAAA,MAAM,CAAGe,UAAU,CAACC,MAAX,CAAkB,CAC/Bf,SAAS,CAAE,CACTW,KAAK,CAAEH,WAAW,CAAC,CADV,CAETK,MAAM,CAAE,GAFC,CADoB,CAAlB,CAAf","sourcesContent":["import React from 'react'\nimport { StyleSheet, Text, View, Dimensions, FlatList } from 'react-native'\nimport moment from 'moment'\nimport Hour from './Hour';\n\nconst DayForecast = ({ dayData, model, units }) => {\n  const swellDirection = dayData[0];\n  const day = moment(Date.parse(dayData[0].time)).format('ddd')\n  const hoursArr = [dayData[6], dayData[12], dayData[18]]\n  function getCardinalDirection(angle) {\n    const directions = ['↑', '↗', '→', '↘', '↓', '↙', '←', '↖'];\n    return directions[Math.round(angle / 45) % 8];\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={{borderBottomWidth: 1, borderBottomColor: 'white'}}>\n        <Text style={{color: 'white', fontSize: 18, margin: 10,}}>{day}</Text>\n        {hoursArr.map((hour) => <Hour key={hour.time} hourData={hour} model={model} units={units}></Hour>)}\n        </View>    \n    </View>\n  )\n}\n\nexport default DayForecast\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\nconst styles = StyleSheet.create({\n  container: {\n    width: windowWidth-5,\n    height: 180,\n  }\n})\n"]},"metadata":{},"sourceType":"module"}